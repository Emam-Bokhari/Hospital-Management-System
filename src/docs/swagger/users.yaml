openapi: 3.0.0
info:
 title: User Management API 
 description: API documentation for managing user-related operations including registration, authentication, and more.
 version: "1.0.0"
servers:
  - url: localhost:3000/api/docs
    description: Development Server
paths:
  "/auth/register":
    post:
      tags:
        - Auths
      summary: Register a New User 
      description: | 
        Endpoint to register a new user in the system. The request body must include user details 
        such as first name, last name, email, password etc. On successful registration, 
        the API returns a confirmation response along with the user's data.
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/UserData"
      responses:
        "201":
          description: |
           Registration was successful. The response includes the newly created user's details and a success message.
          content:
            "application/json":
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data: 
                        $ref: "#/components/schemas/UserData"
  "/users":
    get:
      tags:
        - Users
      summary: Retrieve a list of all users
      description: >
        Fetches all users from the system. This endpoint returns a list of user objects, with each containing relevant user details.
      responses:
        "200": 
          description: Successfully retrieved the list of users
          content:
            "application/json":
              schema: 
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data: 
                        type: array
                        items:
                          $ref: "#/components/schemas/UserData"
  "/users/{id}":
    get:
      tags:
        - Users
      summary: Retrieve a user by their unique ID
      description: >
        Fetches a single user based on the provided user ID. Returns user details including first name, last name, email, and other related information.
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the user to retrieve
          schema: 
            type: string
      responses:
        "200": 
          description: Successfully retrieved the user details
          content:
            "application/json":
              schema: 
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data: 
                        $ref: "#/components/schemas/UserData"
    patch:
      tags:
        - Users
      summary: Update a user by their unique ID
      description: >
       Updates the details of a user identified by their unique ID. You can modify user properties such as the first name, last name, email, etc.
      operationId: updateUserById
      parameters:
        - name: id
          in: path
          required: true 
          description: The unique identifier of the user to be updated.
          schema: 
            type: string
      requestBody:
        content:
          "application/json":
            schema: 
              type: object
              properties:
                _id:
                  type: string
                  example: ObjectId
                firstName:
                  type: string
                  example: "Emam"
      responses:
        "200": 
          description: Successfully updated the user details
          content:
            "application/json":
              schema: 
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties: 
                      data: 
                        type: object
                        properties:
                          _id: 
                            type: string
                            example: ObjectId
                          firstName:
                            type: string
                            example: Emam
    delete:
      tags:
        - Users
      summary: Soft Delete a user by their unique ID
      description: >
        Deletes the user identified by their unique ID from the system. The user will be soft delete.
      operationId: deleteUserById
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the user to delete.
          schema: 
            type: string
      responses:
        "200": 
          description: Successfully deleted the user
          content:
            "application/json":
              schema: 
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data: 
                        type: object
                        example: {}
components:
  schemas:
    UserData:
        type: object
        required:
          - firstName
          - lastName
          - email
          - password
        properties:
          _id: 
            type: string
            example: ObjectId
          firstName:
            type: string
            description: The first name of the user.
            example: Moshfiqur
          lastName:
            type: string
            description: The last name of the user.
            example: Rahmna
          email:
            type: string
            description: The user's email address. Must be unique.
            example: moshfiq@gmail.com
          password:
            type: string
            format: password
            description: A secure password for the user.
            example: moshfiq@123
          role:
            type: string
            description: The user's role in the system
            example: user
          status:
            type: string
            description: The current status of the user account.
            example: active
          createdAt:
            type: string
            format: date
            description: Timestamp of when the user account was created.
            example: "2025-01-03T09:37:17.755909"
          updatedAt:
            type: string
            format: date
            description: Timestamp of the last update to the user account.
            example: "2025-01-03T09:37:17.755909"
    BaseResponse:
      type: object
      properties:
        success: 
          type: boolean
          description: Indicates if the operation was successful.
          example: true
        message:
          type: string
          example: Operation completed successfully
        statusCode:
          type: integer
          description: The HTTP status code of the response.
          example: 200     

